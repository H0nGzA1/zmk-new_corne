#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        hyper_key: hyper_key {
            compatible = "zmk,behavior-hold-tap";
            label = "Hyperé”®";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <45>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E     &kp R  &kp T                                      &kp UP                &kp Y                               &kp U          &kp I      &kp O    &kp P     &kp ESCAPE
&kp LEFT_CONTROL  &kp A  &kp S  &kp D     &kp F  &kp G                            &kp LEFT  &kp ENTER  &kp RIGHT  &kp H                               &kp J          &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT    &kp Z  &kp X  &kp C     &kp V  &kp B               &kp SPACE              &kp DOWN              &kp N                               &kp M          &kp COMMA  &kp DOT  &kp FSLH  &kp RSHIFT
                                &kp LGUI  &mo 1  &mt LEFT_ALT ENTER                                               &mt LS(LA(LC(LEFT_COMMAND))) SPACE  &kp BACKSPACE  &mo 2
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT                                 &mmv MOVE_UP                     &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE
&trans  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL      &kp TILDE     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE
&trans  &kp NUMBER_6     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS       &kp TILDE     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOWN
                                       &trans        &trans        &trans                                                                       &mo 0      &kp DEL        &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&sys_reset       &kp F1           &kp F2             &kp F3                &kp F4                &kp F5                                      &mmv MOVE_UP                     &kp F6    &kp F7    &kp F8  &kp F9     &kp F10  &kp BSPC
&trans           &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &kp C_PLAY_PAUSE            &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp F11  &kp F12
&rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &bt BT_SEL 0       &bt BT_SEL 1          &bt BT_SEL 2          &bt BT_SEL 3      &trans                    &mmv MOVE_DOWN                   &trans    &trans    &trans  &trans     &trans   &trans
                                                     &trans                &trans                &kp SPACE                                                                    &kp RET   &trans    &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };
    };
};
